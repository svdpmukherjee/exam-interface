"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tabs = exports.TabsComponent = exports.tabItemStyleClasses = exports.tabGroupStyleClasses = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = __importDefault(require("classnames"));
const react_1 = require("react");
const TabItem_1 = require("./TabItem");
exports.tabGroupStyleClasses = {
    default: 'flex-wrap border-b border-gray-200 dark:border-gray-700',
    underline: 'flex-wrap -mb-px',
    pills: 'flex-wrap font-medium text-sm text-gray-500 dark:text-gray-400',
    fullWidth: 'hidden text-sm font-medium rounded-lg divide-x divide-gray-200 shadow sm:flex dark:divide-gray-700 dark:text-gray-400',
};
exports.tabItemStyleClasses = {
    default: {
        active: 'bg-gray-100 text-blue-600 dark:bg-gray-800 dark:text-blue-500',
        notActive: 'text-gray-500 hover:bg-gray-50 hover:text-gray-600 dark:text-gray-400 dark:hover:bg-gray-800  dark:hover:text-gray-300',
    },
    underline: {
        active: 'text-blue-600 rounded-t-lg border-b-2 border-blue-600 active dark:text-blue-500 dark:border-blue-500',
        notActive: 'border-b-2 border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-300',
    },
    pills: {
        active: 'rounded-lg bg-blue-600 text-white',
        notActive: 'rounded-lg hover:text-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-white',
    },
    fullWidth: {
        active: 'inline-block p-4 w-full text-gray-900 bg-gray-100 focus:ring-4 focus:ring-blue-300 active focus:outline-none dark:bg-gray-700 dark:text-white',
        notActive: 'bg-white hover:text-gray-700 hover:bg-gray-50 focus:ring-4 focus:ring-blue-300 focus:outline-none dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700',
    },
};
const TabsComponent = ({ children, className, style = 'default', ...rest }) => {
    const id = (0, react_1.useId)();
    const tabs = (0, react_1.useMemo)(() => react_1.Children.map(children, ({ props }) => props), [children]);
    const tabRefs = (0, react_1.useRef)([]);
    const [activeTab, setActiveTab] = (0, react_1.useState)(Math.max(0, tabs.findIndex((tab) => tab.active)));
    const [focusedTab, setFocusedTab] = (0, react_1.useState)(Math.max(0, tabs.findIndex((tab) => tab.active)));
    const handleClick = ({ target }) => {
        setActiveTab(target);
        setFocusedTab(target);
    };
    const handleKeyboard = ({ event, target }) => {
        if (event.key === 'ArrowLeft') {
            setFocusedTab(Math.max(0, focusedTab - 1));
        }
        if (event.key === 'ArrowRight') {
            setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));
        }
        if (event.key === 'Enter') {
            setActiveTab(target);
            setFocusedTab(target);
        }
    };
    (0, react_1.useEffect)(() => {
        tabRefs.current[focusedTab]?.focus();
    }, [focusedTab]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-2", children: [(0, jsx_runtime_1.jsx)("div", { "aria-label": "Tabs", role: "tablist", className: (0, classnames_1.default)('flex text-center', exports.tabGroupStyleClasses[style], {
                    'border-b border-gray-200 dark:border-gray-700': style === 'underline',
                }), ...rest, children: tabs.map((tab, index) => ((0, jsx_runtime_1.jsxs)("button", { type: "button", "aria-controls": `${id}-tabpanel-${index}`, "aria-selected": index === activeTab, className: (0, classnames_1.default)('flex items-center justify-center p-4 text-sm font-medium first:ml-0 disabled:cursor-not-allowed disabled:text-gray-400 disabled:dark:text-gray-500', {
                        'ml-2 first:ml-0': style !== 'fullWidth',
                        'rounded-t-lg': style === 'underline' || style === 'default',
                        'w-full first:rounded-l-lg last:rounded-r-lg': style === 'fullWidth',
                        [exports.tabItemStyleClasses[style].active]: index === activeTab,
                        [exports.tabItemStyleClasses[style].notActive]: index !== activeTab && !tab.disabled,
                    }), disabled: tab.disabled, id: `${id}-tab-${index}`, onClick: () => handleClick({ target: index }), onKeyDown: (event) => handleKeyboard({ event, target: index }), ref: (element) => (tabRefs.current[index] = element), role: "tab", tabIndex: index === focusedTab ? 0 : -1, children: [tab.icon && (0, jsx_runtime_1.jsx)(tab.icon, { className: "mr-2 h-5 w-5" }), tab.title] }, index))) }), (0, jsx_runtime_1.jsx)("div", { children: tabs.map((tab, index) => ((0, jsx_runtime_1.jsx)("div", { "aria-labelledby": `${id}-tab-${index}`, className: (0, classnames_1.default)('p-4', className, tab.className), hidden: index !== activeTab, id: `${id}-tabpanel-${index}`, role: "tabpanel", tabIndex: 0, children: tab.children }, index))) })] }));
};
exports.TabsComponent = TabsComponent;
exports.TabsComponent.displayName = 'Tabs.Group';
TabItem_1.TabItem.displayName = 'Tabs.Item';
exports.Tabs = { Group: exports.TabsComponent, Item: TabItem_1.TabItem };
